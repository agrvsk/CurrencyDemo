
/*
 * Copyright (c) Versata, Inc., 2000-2005. All Rights Reserved.
 *
 * THIS CODE IS AUTO-GENERATED FROM YOUR MODEL.
 * PLEASE DO NOT EDIT IT, BECAUSE ANY CHANGES YOU MAKE WILL BE OVERWRITTEN.
 */
package CurrencyDemo.service.dms;

import com.versata.tl.api.logging.VersataLogger;
import com.versata.tl.common.exception.ServerSecurityException;
import com.versata.tl.common.vlsobject.VSORBException;
import com.versata.tl.vls.core.Session;
import com.versata.tl.vls.service.transfer.BusinessObjectMarshaller;
import com.versata.tl.vls.service.transfer.VersataDMSHandlerBase;

import com.versata.tl.dataaccess.common.Filter;
import com.versata.tl.dataaccess.common.SaveRequest;
import com.versata.tl.dataaccess.common.SearchRequest;
import com.versata.tl.dataaccess.common.VersataChangeSummary;
import com.versata.tl.dataaccess.common.WhereClause;
import com.versata.tl.dataaccess.common.impl.FilterImpl;
import com.versata.tl.dataaccess.common.impl.SearchRequestFactory;
import com.versata.tl.dataaccess.common.IDataGraphCreator;

import commonj.sdo.DataGraph;
import commonj.sdo.DataObject;
import commonj.sdo.Type;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.sdo.EDataGraph;
import org.eclipse.emf.ecore.sdo.SDOFactory;
import org.eclipse.emf.ecore.xml.namespace.XMLNamespacePackage;
import org.eclipse.emf.ecore.xml.type.XMLTypePackage;

// This is the code generated from the SDOs

import CurrencyDemo.Currency_CUR_customer;
import CurrencyDemo.RootObject;
import CurrencyDemo.CurrencyDemoFactory;
import CurrencyDemo.CurrencyDemoPackage;
import CurrencyDemo.impl.CurrencyDemoFactoryImpl;

/**
 * This handles the CRUD operations for implementing the Currency_CUR_customerDMS
 * interface.
 *  
 * @author AUTOGENERATED
 * @see Currency_CUR_customerDMS
 */
public class Currency_CUR_customerDMSHandlerImpl extends VersataDMSHandlerBase implements Currency_CUR_customerDMS
{
	private static final VersataLogger LOGGER = VersataLogger.getLogger(
		Currency_CUR_customerDMSHandlerImpl.class);

	private static final Currency_CUR_customerMarshaller _marshaller = new Currency_CUR_customerMarshaller();
	
	// This is needed to initialize the EMF outside of Eclipse
	static {
		XMLNamespacePackage xmlNamespacePackage = XMLNamespacePackage.eINSTANCE;

		EClass eClass = XMLTypePackage.eINSTANCE.getXMLTypeDocumentRoot();
	}

	public Currency_CUR_customerDMSHandlerImpl(String packageName, Session vsSession) {
		setPackageName(packageName);
		setSession(vsSession);
	}


	// this is the method that takes a searchRequest and processes it and returns datagraph accordingly.
	// the code and comments does not handle exclusion list.
	// TODO: ensure that exclusion list is also handled.
	public DataGraph getCurrency_CUR_customer(SearchRequest csr) throws VSORBException, ServerSecurityException {

		//fire the event for retrieve, passing the csr, dg. The event handler could cause a 'cancel' based on which
		// this code should decide whether to proceed populating or not.

		boolean proceed = true; //proceed should be decided based on event handler.
		return getData(csr, getDataGraphCreator());
	}

	// this is the method that takes arrays of column names and column values and processes it and returns datagraph accordingly.
	// the code and comments does not handle exclusion list.
	// TODO: ensure that exclusion list is also handled.
	public DataGraph getCurrency_CUR_customer(String[] columnNames, Object[] columnValues) throws VSORBException, ServerSecurityException {

		int noOfFilters = columnNames.length;
		Filter rootFilter = null;
		DataGraph dataGraph = SDOFactory.eINSTANCE.createEDataGraph();
		RootObject rootObject = CurrencyDemoFactory.eINSTANCE.createRootObject();
		DataObject root = dataGraph.createRootObject(rootObject.getType().getURI(),"Currency_CUR_customer");
		((EDataGraph)dataGraph).setEChangeSummary(new VersataChangeSummary());
		dataGraph.getChangeSummary().beginLogging();
		 
		Type type = dataGraph.getRootObject().getType();
		
		if(noOfFilters >= 1){
			WhereClause whereClause = new WhereClause(type.getProperty(columnNames[0]), type.getProperty(columnNames[0]), null, columnValues[0], WhereClause.CONDITION_EQUALS, "Currency_CUR_customer");
			rootFilter = new FilterImpl(whereClause);
		}
		for(int i=1;i<columnNames.length;i++){
			WhereClause whereClause = new WhereClause(type.getProperty(columnNames[i]), type.getProperty(columnNames[i]), null, columnValues[i], WhereClause.CONDITION_EQUALS, "Currency_CUR_customer");
			Filter tempFilter = new FilterImpl(whereClause);
			rootFilter = new FilterImpl(tempFilter,rootFilter,1,"Currency_CUR_customer");
		}
		SearchRequest csr = SearchRequestFactory.createFirstPageSearchRequest("Currency_CUR_customer", rootFilter, SearchRequest.NO_ROW_LIMIT, getDataGraph().getRootObject().getType().getProperty("currency_CUR_customer"), null, null);
		
		boolean proceed = true; //proceed should be decided based on event handler.
		return getData(csr, getDataGraphCreator());
	}

	// this is the method that takes a saveRequest and processes it and returns the datagraph having the
    // updated data records.
	public DataGraph updateCurrency_CUR_customer(SaveRequest saveRequest) throws VSORBException, ServerSecurityException {
		return update(saveRequest, getDataGraphCreator());
	}

	public DataGraph getDataGraph() {
		return getDataGraph(true);
	}

	/**
	 * This returns an initialized DataGraph object. It should be in the base
	 * class but the EMF initialization would force EMF code to be embedded in
	 * the core. <p/>My kingdom for a DataGraph factory in the SDO spec.
	 * 
	 * @param withLogging
	 * @return
	 */
	private DataGraph getDataGraph(boolean withLogging) {
		IDataGraphCreator dgCreator = getDataGraphCreator();
		
		DataGraph dataGraph = dgCreator.createEmptyDataGraphWithRoot();
		if (withLogging) {
			dataGraph.getChangeSummary().beginLogging();
		}

		return dataGraph; 
	}
	
	private IDataGraphCreator getDataGraphCreator() {
		IDataGraphCreator dgCreator = new IDataGraphCreator() {
			public DataGraph createEmptyDataGraphWithRoot() {
				DataGraph dataGraph = SDOFactory.eINSTANCE.createEDataGraph();
		
				RootObject rootObject = CurrencyDemoFactory.eINSTANCE.createRootObject();
				//TODO: change RootObject to VersataRootDataObject
				DataObject root = dataGraph.createRootObject(rootObject.getType().getURI(),"RootObject");
				//TODO: set Versata Change setting here. Fix the 
				//createEmptyDataGraphWithRootWithoutChgListener() method if that is done.
				return dataGraph;
			}
			
			public DataGraph createEmptyDataGraphWithRootWithoutChgListener() {
			    //Currently the createEmptyDataGraphWithRoot() itself is not attaching a change setting.
			    //If that does, then this method should change.
				return createEmptyDataGraphWithRoot();
			}
		};
		
		return dgCreator;
	}
	
	protected BusinessObjectMarshaller getRootMarshaller(){
		return _marshaller;
	}
	

}
