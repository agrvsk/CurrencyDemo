

/*
 * Copyright (c) Versata, Inc., 2000-2004. All Rights Reserved. THIS CODE IS
 * AUTOGENERATED BASED ON THE METAMODEL. DO NOT EDIT
 * 
 * Generated Thu Nov 01 15:34:40 CET 2012 by $Header: //depot/main/products/tl/eclipse/plugins/com.versata.tl.service/templates/QOSingleDO.javajet#52 $
 */

package CurrencyDemo.service;

import java.util.Enumeration;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;

import javax.ejb.SessionBean;
import javax.ejb.SessionContext;
import javax.ejb.CreateException;
import javax.naming.InitialContext;
import javax.naming.NamingException;

import com.versata.tl.api.itext.MessageLocalizer;
import com.versata.tl.api.exception.VersataRuntimeException;
import com.versata.tl.api.logging.VersataLogger;
import com.versata.tl.vls.core.VSORBSessionImpl;
import com.versata.tl.vls.dataaccess.SQLGenerator;
import com.versata.tl.vls.dataaccess.connection.VSJdbc;
import com.versata.tl.vls.service.ServiceUtils;
import com.versata.tl.vls.service.ServiceException;
import com.versata.tl.common.exception.ServerSecurityException;
import com.versata.tl.common.util.SearchRequest;
import com.versata.tl.common.meta.VSQueryDefinition;
import com.versata.tl.common.text.AdminMsgCode;

import com.versata.tl.common.vstrace.VSTrace;
import com.versata.tl.common.vstrace.VSTraceHelper;
import com.versata.tl.dataaccess.common.Filter;
import com.versata.tl.dataaccess.common.WhereClause;
import com.versata.tl.dataaccess.common.impl.FilterFactory;
import com.versata.tl.dataaccess.common.impl.WhereClauseFactory;

import CurrencyDemo.Common_COP_Q;
import CurrencyDemo.Common_COP_QImpl;
import CurrencyDemo.service.impl.Common_COP_QServiceImpl;
import CurrencyDemo.service.dto.Common_COP_QDTO;

import commonj.sdo.DataGraph;



/**
 * A stateless session bean which exposes the Common_COP_Q query
 * model. 
 * 
 * 
 * All methods take a String parameter 'uid' which is optionally used to
 * create the server session. Depending on how this bean is deployed, the
 * uid may or may not be used. The generated ejb deployment descriptor
 * contains an ejb enviroment entry 'runtimeUid' which defaults to an empty
 * string.
 * <p>
 * If the runtimeUid entry is set to "_useEjbContext_", the actual uid 
 * used at runtime will be the result of a getCallerPrincipal().getName() 
 * call on the ejb context.  This is the most logical and secure option
 * to use if you have app server security enabled and the BRE server is 
 * configured to use app server security. 
 * <p>
 * If the uid environment entry contains a non-empty string not equal to 
 * "_useEjbContext_" (e.g. "sa"), then that string will be used as the 
 * uid to establish the session for <I>all</I> calls to the underlying 
 * service layers, regardless of the uid method parameter. This setting 
 * is not recommended since it effectively hard-codes the user context 
 * of all service operations and will prevent many security-related business
 * rules and settings to fail. For example you may have a rule that prevents 
 * customers from updating customer records which do not match the current 
 * userid. 
 * <p> 
 * If the uid environment entry is left empty then the uid parameter to 
 * each method is used to establish the session. It is up to the application
 * to ensure that the uid parameter is valid in the context of the call to
 * the service bean. This is easily done since most servlets have a login
 * page which validates the uid/password combination in a form and 
 * thereafter the uid is kept in in the http session object.
 * <p>
 * You can set the value of the environment entry that is generated by
 * adding an extended property to the query model named 'runtimeUid'. 
 * If this property is not present, it will default to an empty string. 
 * <p>
 * In all cases, the session is created once per EJB transaction and 
 * committed when the EJB transaction commits. Each method has an EJB
 * transaction attribute 'Required', so unless the client sets up a 
 * UserTransaction or is participating in an existing transaction, the 
 * session will be created (and committed or rolled back due to failure) 
 * on each method call. When a session is created by the bean it is
 * associated with the current EJB transaction. Subsequent method calls
 * will determine whether there is already a session associated with the
 * current transaction and reuse that session if it exists.  
 * <P>
 * <B>WEB SERVICES SECURITY WARNING</B><p>
 * Understand the consequences of deploying an automatically generated web
 * service which calls this bean.  Using the default setting and no http
 * authentication, any web service client can act as any user!  It is strongly
 * recommended that you secure your web service by using ejbContext security,
 * HTTP authentication and https to encrypt the soap request on the wire. There
 * are many alternatives (including using your native app server web services). 
 * Consult the Axis documentation at {@link http://http://ws.apache.org/axis} 
 * and specifically {@link http://ws.apache.org/axis/java/security.html#AuthenticatingTheCaller } 
 * for more information.
 * 
 * Please note that the 'WebService' bean which is (optionally) generated by the
 * Versata Workbench wraps this bean and requires the web service consumer to pass in a 
 * 'security token' which is mapped to a uid when this bean is called.  See the 
 * Common_COP_QWebServiceBean javadoc for more details, it is probably
 * 'good enough' to meet your corporate security requirements
 *   
 * 
 * @ejb.bean name="Common_COP_S" type="Stateless"
 *           display-name="Common_COP_S Bean"
 *           description="Provides Common_COP_S services."
 *            
 *			 jndi-name="CurrencyDemo/service/Common_COP_S" 
 *			 local-jndi-name="CurrencyDemo/service/Common_COP_SLocal" 
 *			 view-type="both"
 * 
 * @ejb:home extends="javax.ejb.EJBHome"
 * @ejb:interface extends="javax.ejb.EJBObject"
 * 
 * @ejb:transaction type="Required"
 * 
 * @ejb:transaction-type type="Container"
 *
 * @ejb:env-entry 
 * 		name="runtimeUid" 
 * 		type="java.lang.String" 
 * 		value=""
 * 		description="See generated javadoc. May be used to override the uid parameters to this bean's methods"
 * 
 * 
 * @weblogic.clustering home-is-clusterable="True"
 *                      stateless-bean-is-clusterable="True"
 * 
 * 
 * 
 */


 public class Common_COP_SBean implements SessionBean {

	private static final VersataLogger LOGGER = VersataLogger.getLogger(
				Common_COP_SBean.class);


	 /**
	  * Validate the bean's internal mechanics.
	  * 
	  * @param input
	  *            An arbitrary string which will be embedded in the return
	  *            string
	  * @return A string containing the name of the bean, the name of the
	  *         current app server (repository name) and the input string.
	  * @ejb:interface-method view-type="both"
	  * 
	  */
	 public String ping(String uid, String input) {
		LOGGER.debug("ping " + this);
		VSTraceHelper tr = VSTrace.IS_ON ? new VSTraceHelper("ping") : null;				
		String retVal = null;
		try {
			VSORBSessionImpl session = getSession(uid);	
				
			retVal = "Common_COP_QService bean, Generated Thu Nov 01 15:34:40 CET 2012 by $Header: //depot/main/products/tl/eclipse/plugins/com.versata.tl.service/templates/QOSingleDO.javajet#52 $ running in app server '" + session.getName() + "' at your service <in response to '" + input + "'>";	    
			return retVal;
	   }
	   finally {
	   	if (tr != null) tr.returning(retVal);
	   }
	  }
	 
		  		 
		 

				

			
				
	/** 
	* User-defined operation setRemoteUpdateCUR
	*
	* Dummy only for test
	* 
	* @ejb:interface-method view-type="both"
	*/
	public Boolean setRemoteUpdateCUR (String uid, java.lang.String sCurrencyCode, java.lang.String sRemoteParm) throws ServiceException {
    	LOGGER.debug("setRemoteUpdateCUR");
		VSTraceHelper tr = VSTrace.IS_ON ? new VSTraceHelper("setRemoteUpdateCUR") : null;
		
								 			 								
		Boolean retVal = null;
		
		try {	
			VSORBSessionImpl session = getSession(uid);
		
									 			 								
					retVal = delegate.setRemoteUpdateCUR(sCurrencyCode, sRemoteParm, session);
					return retVal;
			
		} catch(Exception e) {
			throw new ServiceException(e);
		}
		finally {
								 			 								
	   	        if (tr != null) tr.returning(retVal);		
		
		}	
	}
		
	/**
	 * Establish a new TLE session or reuse the existing session for this
	 * JTA transaction. The TLE user name will determined according to the 
	 * policy described in the class javadoc.
	 * 
	 * @return a server-side session which will last the duration of the
	 *         current JTA transaction.
	 */
	private VSORBSessionImpl getSession(String uid)  {
		
		// override the uid param if necessary.
		if (useejbContext__) {
			uid = _context.getCallerPrincipal().getName();
		}
		else if (hardcodedUid__ != null) {
			uid = hardcodedUid__;
		} 

		VSORBSessionImpl session = ServiceUtils.getSessionForUser(uid, "CurrencyDemo");
		
		return session;
	}
	
	/**
	 * Sets the session context. Called by the EJB container. DO NOT call
	 * this method from your own code.
	 * 
	 * @param ctx
	 *            SessionContext Context for session
	 */
	public void setSessionContext(SessionContext ctx) {
		if (LOGGER.isDebugEnabled()) {
			LOGGER.debug("setSessionContext for " + this);
		}

		_context = ctx;
	}
	
	public void ejbCreate() throws CreateException {
		if (LOGGER.isDebugEnabled()) {
			LOGGER.debug("ejbCreate for " + this);
		}
		System.out.println("Common_COP_SBean.ejbCreate()");
		determineRuntimeUid();	
	}

	public void ejbRemove(){
		System.out.println("Common_COP_SBean.ejbRemove()");
		if (LOGGER.isDebugEnabled()) {
			LOGGER.debug("ejbRemove for " + this);
			}
	}

	public void ejbActivate() 	{
		System.out.println("Common_COP_SBean.ejbActivate()");
		if (LOGGER.isDebugEnabled()) {
			LOGGER.debug("ejbActivate for " + this);
			}
	}

	public void ejbPassivate() 	{
		System.out.println("Common_COP_SBean.ejbPassivate()");
		if (LOGGER.isDebugEnabled()) {
			LOGGER.debug("ejbPassivate for " + this);
			}
	}

	/**
	 * Determine what uid to use at runtime. static synchronized to only perform
	 * the expensive InitialContext and JNDI lookup once. 
	 * 
	 * @throws CreateException if the runtimeUid ejb env entry cannot be found.
	 * 
	 */
	private synchronized static void determineRuntimeUid() throws CreateException {
	
		// only look for the enviroment entries in the deployment descriptor once.
		if (!haveReadDeploymentDescriptor__) {
			try {
				InitialContext ic = new InitialContext();		
				String runtimeUid = (String)ic.lookup("java:comp/env/runtimeUid");
				ic.close();
				
				if (USE_EJB_CONTEXT.equals(runtimeUid)) {
					useejbContext__ = true;
					LOGGER.debug("Will use the ejbContext uid when establishing a BRE session");
				} else if (runtimeUid.length() == 0) {
					LOGGER.debug("Will use the uid method parameter when establishing a BRE session");							
				} else {
					hardcodedUid__ = runtimeUid;
					LOGGER.debug("Will use the uid '" + hardcodedUid__ + "' when establishing a BRE session");				
				}
				
				haveReadDeploymentDescriptor__ = true;
				}		
		 	catch (NamingException ne) {
		 		Object[] params = {"runtimeUid", "Common_COP_S"};
				LOGGER.warn(AdminMsgCode.INVALID_DEPLOYMENT_DESCRIPTOR, 
					params, ne);
				throw new CreateException(MessageLocalizer.getLocalizedMessage(
					AdminMsgCode.INVALID_DEPLOYMENT_DESCRIPTOR,	params, 
					Locale.getDefault()));
			}
		}
	}
	
	
	private SessionContext _context;
	private static boolean haveReadDeploymentDescriptor__;
	private static boolean useejbContext__;
	private static String hardcodedUid__;
	public static final String USE_EJB_CONTEXT = "_useEjbContext_";
	

		
		private CurrencyDemo.Common_COP_S_Delegate delegate = new CurrencyDemo.Common_COP_S_Delegate();
			
		private Common_COP_QServiceImpl _impl = new Common_COP_QServiceImpl(delegate);
	
	/** 
		* Pre-defined operation createNewDelegate
		*
		* Creates a new instance of the delegate class
		* 
		* @ejb:interface-method view-type="both"
		*/
		public void createNewDelegate(String uid)throws ServiceException {
			LOGGER.debug("createNewDelegate");
			try {
				VSORBSessionImpl session = getSession(uid);	
				delegate = new CurrencyDemo.Common_COP_S_Delegate();
			}catch(Exception e){
				LOGGER.info("Cannot create new instance of delegate");
				throw new ServiceException(e);
			}
		}
		
	 }
